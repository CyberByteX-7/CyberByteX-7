#An Advanced password generator that incorporates various features to create strong and unique passwords
import string
import random
import secrets

def generate_password(
    length: int,
    use_uppercase: bool = True,
    use_numbers: bool = True,
    use_special_chars: bool = True,
    use_punctuation: bool = True,
    use_ambiguous_chars: bool = False,
    exclude_similar_chars: bool = False,
    require_each_type: bool = False,
    password_blacklist: list = []
):
    """
    Generates a strong and unique password.

    Args:
        length (int): The length of the password.
        use_uppercase (bool): Whether to include uppercase letters. Defaults to True.
        use_numbers (bool): Whether to include numbers. Defaults to True.
        use_special_chars (bool): Whether to include special characters. Defaults to True.
        use_punctuation (bool): Whether to include punctuation characters. Defaults to True.
        use_ambiguous_chars (bool): Whether to include ambiguous characters (e.g., 'l' and 'I'). Defaults to False.
        exclude_similar_chars (bool): Whether to exclude similar characters (e.g., 'o' and '0'). Defaults to False.
        require_each_type (bool): Whether to require at least one character from each type (uppercase, number, special char). Defaults to False.
        password_blacklist (list): A list of blacklisted passwords to avoid generating. Defaults to an empty list.

    Returns:
        str: A strong and unique password.
    """

    # Define the character sets
    lowercase_chars = string.ascii_lowercase
    uppercase_chars = string.ascii_uppercase
    number_chars = string.digits
    special_chars = string.punctuation
    punctuation_chars = string.punctuation

    # Filter out ambiguous characters if desired
    if not use_ambiguous_chars:
        lowercase_chars = lowercase_chars.replace('l', '').replace('i', '')
        uppercase_chars = uppercase_chars.replace('L', '').replace('I', '')

    # Filter out similar characters if desired
    if exclude_similar_chars:
        lowercase_chars = lowercase_chars.replace('o', '').replace('q', '')
        uppercase_chars = uppercase_chars.replace('O', '').replace('Q', '')
        number_chars = number_chars.replace('0', '').replace('1', '')

    # Combine the character sets based on the options
    all_characters = lowercase_chars
    if use_uppercase:
        all_characters += uppercase_chars
    if use_numbers:
        all_characters += number_chars
    if use_special_chars:
        all_characters += special_chars
    if use_punctuation:
        all_characters += punctuation_chars

    # Ensure the password has at least one character from each type if required
    if require_each_type:
        password = [random.choice(lowercase_chars), random.choice(uppercase_chars), random.choice(number_chars), random.choice(special_chars)]
        for _ in range(length - 4):
            password.append(random.choice(all_characters))
        random.shuffle(password)
    else:
        password = [random.choice(all_characters) for _ in range(length)]

    # Convert the password list to a string
    password = ''.join(password)

    # Check if the generated password is in the blacklist
    while password in password_blacklist:
        password = generate_password(length, use_uppercase, use_numbers, use_special_chars, use_punctuation, use_ambiguous_chars, exclude_similar_chars, require_each_type, password_blacklist)

    return password

# Example usage:
print(generate_password(16, use_uppercase=True, use_numbers=True, use_special_chars=True, use_punctuation=True, require_each_type=True))
